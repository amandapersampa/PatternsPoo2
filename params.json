{"name":"Patternspoo2","tagline":"","body":"### Padrões Criativos\r\nTrabalho apresentado na matéria Programação Orientada à Objetos 2 do curso de Sistemas de informação do IFES.\r\n\r\n### Builder:  \r\nÉ um padrão de projeto de software que permite a separação da construção de um objeto complexo da sua representação, de forma que o mesmo processo de construção possa criar diferentes representações.\r\nO padrão é dividido em 4 classes: Produto, o Builder abstrato(quem identifica o comportamento), o builder concreto (quem implementa o comportamento), e o diretor:\r\n\r\n![Class Diagram](http://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Builder_UML_class_diagram.svg/500px-Builder_UML_class_diagram.svg.png)\r\n\r\n```\r\n$class Product(object):\r\n$     def __init__(self, type_name):\r\n$          self.type = type_name\r\n$          self.part = None\r\n$     def view(self):\r\n$          print(\"This Product is a \" +self.type +\" with; \" + str(self.part))\r\n$#----------------------------------------\r\n$# Uma simulação de classe abstrata para python: versão análoga a classe abstrata de Java\r\n$#----------------------------------------\r\n$class AbstractBuilder(object):\r\n$     def BuilPart(self):\r\n$          raise NotImplementedError(\"Classe abstrata\")\r\n$#----------------------------------------\r\n$# A classe que extende a Classe abstrata do Builder\r\n$#----------------------------------------\r\n$class ConcreteBuilder(AbstractBuilder):\r\n$     def __init__(self):\r\n$          self.product = Product(\"X\")\r\n$     def buildPart(self):\r\n$          self.product.part = \"part\"\r\n$#----------------------------------------\r\n$# A classe que direciona a Construção dos produtos\r\n$#----------------------------------------\r\n$class Director(object):\r\n$     def __init__(self):\r\n$          self.builder = None\r\n$     def create(self):\r\n$          if(self.builder == None):\r\n$          raise NotImplementedError(\"No defined builder\")\r\n$          self.builder.buildPart()\r\n$          return self.builder.product\r\n```\r\n\r\n### Dificuldades\r\nO trabalho foi bastante simples, a maior dificuldade foi identificar a criação de classes abstratas no python, pois isso não é nativo dele. Como foi demonstrado acima foi criada uma classe em que se fosse utilizado alguns de seus métodos teria um erro, simulando a ideia de que uma classe abstrata não pode ser instânciada.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}